{"ast":null,"code":"var _jsxFileName = \"/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js\";\nimport React, { useState } from 'react';\nimport VisualPage, { About, Complexity, Controls, ControlGroup, Visualization } from '../VisualPage.js';\nimport { Node } from '../VisualComponents.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [end, setEnd] = useState(-1);\n  const [addVal, setAddVal] = useState();\n  const [searchVal, setSearchVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.slice();\n    let added = false;\n    const newItem = {\n      \"next\": addEnd ? -1 : start,\n      \"value\": addVal,\n      \"highlight\": false\n    }; // Add new item in next undefined slot\n\n    let i = 0;\n\n    for (; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = newItem;\n        added = true;\n      }\n    }\n\n    if (!added) {\n      i = newList.length;\n      newList.push(newItem);\n    } // Fix old last node's pointer if addEnd\n\n\n    if (addEnd) {\n      if (end === -1) {\n        setEnd(i);\n      } else {\n        newList[end].next = i;\n        setEnd(i);\n      }\n    } else {\n      setStart(i);\n      if (end === -1) setEnd(i);\n    }\n\n    setList(newList);\n  }\n\n  function search() {\n    let index = start;\n    let visted = [];\n    let cancel = setInterval(() => {\n      if (index === -1) {\n        setList(list.map((v, i) => Object.assign({}, v, {\n          \"highlight\": visted.includes(i) && v.value === searchVal\n        })));\n        clearInterval(cancel);\n        return;\n      }\n\n      setList(list.map((v, i) => Object.assign({}, v, {\n        \"highlight\": i === index || v.value === searchVal && visted.includes(i)\n      })));\n      visted.push(index);\n      index = list[index].next;\n\n      if (list[index].value === searchVal) {\n        index = -1;\n      }\n    }, 1000);\n  } // Generate the nodes in correct order for visualization\n\n\n  const ordered = [];\n  let i = start;\n\n  while (i !== -1) {\n    ordered.push( /*#__PURE__*/React.createElement(Node, {\n      key: i,\n      highlight: list[i].highlight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, list[i].value));\n    i = list[i].next;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"Add item\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"add\",\n    type: \"text\",\n    onChange: e => setAddVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => add(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"Add Front\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => add(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Add End\")), /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"search\",\n    onChange: e => setSearchVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(Visualization, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, ordered));\n}\n\nexport default function LinkedList(props) {\n  return /*#__PURE__*/React.createElement(VisualPage, {\n    title: \"Linked List\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(About, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"What is a Linked List?\"), \"Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\"), /*#__PURE__*/React.createElement(Complexity, {\n    complexity: [{\n      \"name\": \"Indexing\",\n      \"complexity\": \"Θ(n)\"\n    }, {\n      \"name\": \"Insert/delete at beginning\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Insert/delete at end (when last element known)\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Insert/delete in middle\",\n      \"complexity\": \"Θ(n) + Θ(1)\"\n    }, {\n      \"name\": \"Average wasted space\",\n      \"complexity\": \"Θ(1)\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Demo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js"],"names":["React","useState","VisualPage","About","Complexity","Controls","ControlGroup","Visualization","Node","Demo","list","setList","start","setStart","end","setEnd","addVal","setAddVal","searchVal","setSearchVal","add","addEnd","newList","slice","added","newItem","i","length","undefined","push","next","search","index","visted","cancel","setInterval","map","v","Object","assign","includes","value","clearInterval","ordered","highlight","e","target","LinkedList","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport VisualPage, {\n  About,\n  Complexity,\n  Controls,\n  ControlGroup,\n  Visualization,\n} from '../VisualPage.js';\nimport {\n  Node,\n} from '../VisualComponents.js';\n\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [end, setEnd] = useState(-1);\n  const [addVal, setAddVal] = useState();\n  const [searchVal, setSearchVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.slice();\n    let added = false;\n    const newItem = {\n      \"next\": addEnd ? -1 : start,\n      \"value\": addVal,\n      \"highlight\": false,\n    }\n    // Add new item in next undefined slot\n    let i = 0;\n    for (; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = newItem;\n        added = true;\n      }\n    }\n    if (!added) {\n      i = newList.length;\n      newList.push(newItem);\n    }\n\n    // Fix old last node's pointer if addEnd\n    if (addEnd) {\n      if (end === -1) {\n        setEnd(i);\n      } else {\n        newList[end].next = i;\n        setEnd(i);\n      }\n    } else {\n      setStart(i);\n      if (end === -1)\n        setEnd(i);\n    }\n    setList(newList);\n  }\n\n  function search() {\n    let index = start;\n    let visted = [];\n    let cancel = setInterval(() => {\n      if (index === -1) {\n        setList(list.map((v, i) => Object.assign({}, v, {\n          \"highlight\": visted.includes(i)\n            && v.value === searchVal\n        })));\n        clearInterval(cancel)\n        return;\n      }\n      setList(list.map((v, i) => Object.assign({}, v, {\n        \"highlight\": i === index\n          || (v.value === searchVal && visted.includes(i))\n      })));\n      visted.push(index);\n      index=list[index].next;\n      \n      if (list[index].value === searchVal) {\n        index = -1;\n      }\n    }, 1000);\n  }\n\n  // Generate the nodes in correct order for visualization\n  const ordered = [];\n  let i = start;\n  while (i !== -1) {\n    ordered.push(\n      <Node key={i} highlight={list[i].highlight}>{list[i].value}</Node>\n    );\n    i = list[i].next;\n  }\n  return (\n    <>\n      <Controls>\n        <ControlGroup>\n          <label htmlFor=\"add\">Add item</label>\n          <input name=\"add\" type=\"text\" onChange={e => setAddVal(e.target.value)}></input>\n          <button onClick={() => add(false)}>Add Front</button>\n          <button onClick={() => add(true)}>Add End</button>\n        </ControlGroup>\n        <ControlGroup>\n          <label htmlFor=\"search\">Search</label>\n          <input name=\"search\" onChange={e => setSearchVal(e.target.value)}></input>\n          <button onClick={search}>Search</button>\n        </ControlGroup>\n      </Controls>\n      <Visualization>\n        {ordered}\n      </Visualization>\n    </>\n  );\n}\n\nexport default function LinkedList(props) {\n  return (\n    <VisualPage title=\"Linked List\">\n      <About>\n        <h4>What is a Linked List?</h4>\n        Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\n      </About>\n      <Complexity complexity={[\n        {\n          \"name\": \"Indexing\",\n          \"complexity\": \"Θ(n)\"\n        },\n        {\n          \"name\": \"Insert/delete at beginning\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete at end (when last element known)\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete in middle\",\n          \"complexity\": \"Θ(n) + Θ(1)\",\n        },\n        {\n          \"name\": \"Average wasted space\",\n          \"complexity\": \"Θ(1)\",\n        },\n      ]} />\n      <Demo />\n    </VisualPage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}