{"ast":null,"code":"import _slicedToArray from\"/home/dan/Projects/datastructures.dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import VisualPage,{About,Complexity,Controls,ControlGroup,Visualization}from'../VisualPage.js';import{Node}from'../VisualComponents.js';function Demo(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),list=_useState2[0],setList=_useState2[1];var _useState3=useState(-1),_useState4=_slicedToArray(_useState3,2),start=_useState4[0],setStart=_useState4[1];var _useState5=useState(-1),_useState6=_slicedToArray(_useState5,2),end=_useState6[0],setEnd=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),addVal=_useState8[0],setAddVal=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),searchVal=_useState10[0],setSearchVal=_useState10[1];function add(addEnd){var newList=list.slice();var added=false;var newItem={\"next\":addEnd?-1:start,\"value\":addVal,\"highlight\":false};// Add new item in next undefined slot\nvar i=0;for(;i<newList.length&&!added;i++){if(newList[i]===undefined){newList[i]=newItem;added=true;}}if(!added){i=newList.length;newList.push(newItem);}// Fix old last node's pointer if addEnd\nif(addEnd){if(end===-1){setEnd(i);}else{newList[end].next=i;setEnd(i);}}else{setStart(i);if(end===-1)setEnd(i);}setList(newList);}function search(){// TODO implement actual search animation\nsetList(list.map(function(v,i){return Object.assign({},v,{\"highlight\":v.value===searchVal});}));}// Generate the nodes in correct order for visualization\nvar ordered=[];var i=start;while(i!==-1){ordered.push(/*#__PURE__*/React.createElement(Node,{key:i,highlight:list[i].highlight},list[i].value));i=list[i].next;}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Controls,null,/*#__PURE__*/React.createElement(ControlGroup,null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"add\"},\"Add item\"),/*#__PURE__*/React.createElement(\"input\",{name:\"add\",type:\"text\",onChange:function onChange(e){return setAddVal(e.target.value);}}),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return add(false);}},\"Add Front\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return add(true);}},\"Add End\")),/*#__PURE__*/React.createElement(ControlGroup,null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"search\"},\"Search\"),/*#__PURE__*/React.createElement(\"input\",{name:\"search\",onChange:function onChange(e){return setSearchVal(e.target.value);}}),/*#__PURE__*/React.createElement(\"button\",{onClick:search},\"Search\"))),/*#__PURE__*/React.createElement(Visualization,null,ordered));}export default function LinkedList(props){return/*#__PURE__*/React.createElement(VisualPage,{title:\"Linked List\"},/*#__PURE__*/React.createElement(About,null,/*#__PURE__*/React.createElement(\"h4\",null,\"What is a Linked List?\"),\"Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\"),/*#__PURE__*/React.createElement(Complexity,{complexity:[{\"name\":\"Indexing\",\"complexity\":\"Θ(n)\"},{\"name\":\"Insert/delete at beginning\",\"complexity\":\"Θ(1)\"},{\"name\":\"Insert/delete at end (when last element known)\",\"complexity\":\"Θ(1)\"},{\"name\":\"Insert/delete in middle\",\"complexity\":\"Θ(n) + Θ(1)\"},{\"name\":\"Average wasted space\",\"complexity\":\"Θ(1)\"}]}),/*#__PURE__*/React.createElement(Demo,null));}","map":{"version":3,"sources":["/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js"],"names":["React","useState","VisualPage","About","Complexity","Controls","ControlGroup","Visualization","Node","Demo","list","setList","start","setStart","end","setEnd","addVal","setAddVal","searchVal","setSearchVal","add","addEnd","newList","slice","added","newItem","i","length","undefined","push","next","search","map","v","Object","assign","value","ordered","highlight","e","target","LinkedList","props"],"mappings":"4JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,UAAP,EACEC,KADF,CAEEC,UAFF,CAGEC,QAHF,CAIEC,YAJF,CAKEC,aALF,KAMO,kBANP,CAOA,OACEC,IADF,KAEO,wBAFP,CAIA,QAASC,CAAAA,IAAT,EAAgB,eACUR,QAAQ,CAAC,EAAD,CADlB,wCACPS,IADO,eACDC,OADC,8BAEYV,QAAQ,CAAC,CAAC,CAAF,CAFpB,yCAEPW,KAFO,eAEAC,QAFA,8BAGQZ,QAAQ,CAAC,CAAC,CAAF,CAHhB,yCAGPa,GAHO,eAGFC,MAHE,8BAIcd,QAAQ,EAJtB,yCAIPe,MAJO,eAICC,SAJD,8BAKoBhB,QAAQ,EAL5B,0CAKPiB,SALO,gBAKIC,YALJ,gBAOd,QAASC,CAAAA,GAAT,CAAaC,MAAb,CAAqB,CACnB,GAAIC,CAAAA,OAAO,CAAGZ,IAAI,CAACa,KAAL,EAAd,CACA,GAAIC,CAAAA,KAAK,CAAG,KAAZ,CACA,GAAMC,CAAAA,OAAO,CAAG,CACd,OAAQJ,MAAM,CAAG,CAAC,CAAJ,CAAQT,KADR,CAEd,QAASI,MAFK,CAGd,YAAa,KAHC,CAAhB,CAMA;AACA,GAAIU,CAAAA,CAAC,CAAG,CAAR,CACA,KAAOA,CAAC,CAAGJ,OAAO,CAACK,MAAZ,EAAsB,CAACH,KAA9B,CAAqCE,CAAC,EAAtC,CAA0C,CACxC,GAAIJ,OAAO,CAACI,CAAD,CAAP,GAAeE,SAAnB,CAA8B,CAC5BN,OAAO,CAACI,CAAD,CAAP,CAAaD,OAAb,CACAD,KAAK,CAAG,IAAR,CACD,CACF,CACD,GAAI,CAACA,KAAL,CAAY,CACVE,CAAC,CAAGJ,OAAO,CAACK,MAAZ,CACAL,OAAO,CAACO,IAAR,CAAaJ,OAAb,EACD,CAED;AACA,GAAIJ,MAAJ,CAAY,CACV,GAAIP,GAAG,GAAK,CAAC,CAAb,CAAgB,CACdC,MAAM,CAACW,CAAD,CAAN,CACD,CAFD,IAEO,CACLJ,OAAO,CAACR,GAAD,CAAP,CAAagB,IAAb,CAAoBJ,CAApB,CACAX,MAAM,CAACW,CAAD,CAAN,CACD,CACF,CAPD,IAOO,CACLb,QAAQ,CAACa,CAAD,CAAR,CACA,GAAIZ,GAAG,GAAK,CAAC,CAAb,CACEC,MAAM,CAACW,CAAD,CAAN,CACH,CACDf,OAAO,CAACW,OAAD,CAAP,CACD,CAED,QAASS,CAAAA,MAAT,EAAkB,CAChB;AACApB,OAAO,CAACD,IAAI,CAACsB,GAAL,CAAS,SAACC,CAAD,CAAGP,CAAH,QAASQ,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBF,CAAlB,CAAqB,CAAC,YAAaA,CAAC,CAACG,KAAF,GAAYlB,SAA1B,CAArB,CAAT,EAAT,CAAD,CAAP,CACD,CAED;AACA,GAAMmB,CAAAA,OAAO,CAAG,EAAhB,CACA,GAAIX,CAAAA,CAAC,CAAGd,KAAR,CACA,MAAOc,CAAC,GAAK,CAAC,CAAd,CAAiB,CACfW,OAAO,CAACR,IAAR,cACE,oBAAC,IAAD,EAAM,GAAG,CAAEH,CAAX,CAAc,SAAS,CAAEhB,IAAI,CAACgB,CAAD,CAAJ,CAAQY,SAAjC,EAA6C5B,IAAI,CAACgB,CAAD,CAAJ,CAAQU,KAArD,CADF,EAGAV,CAAC,CAAGhB,IAAI,CAACgB,CAAD,CAAJ,CAAQI,IAAZ,CACD,CACD,mBACE,qDACE,oBAAC,QAAD,mBACE,oBAAC,YAAD,mBACE,6BAAO,OAAO,CAAC,KAAf,aADF,cAEE,6BAAO,IAAI,CAAC,KAAZ,CAAkB,IAAI,CAAC,MAAvB,CAA8B,QAAQ,CAAE,kBAAAS,CAAC,QAAItB,CAAAA,SAAS,CAACsB,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAb,EAAzC,EAFF,cAGE,8BAAQ,OAAO,CAAE,yBAAMhB,CAAAA,GAAG,CAAC,KAAD,CAAT,EAAjB,cAHF,cAIE,8BAAQ,OAAO,CAAE,yBAAMA,CAAAA,GAAG,CAAC,IAAD,CAAT,EAAjB,YAJF,CADF,cAOE,oBAAC,YAAD,mBACE,6BAAO,OAAO,CAAC,QAAf,WADF,cAEE,6BAAO,IAAI,CAAC,QAAZ,CAAqB,QAAQ,CAAE,kBAAAmB,CAAC,QAAIpB,CAAAA,YAAY,CAACoB,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAhB,EAAhC,EAFF,cAGE,8BAAQ,OAAO,CAAEL,MAAjB,WAHF,CAPF,CADF,cAcE,oBAAC,aAAD,MACGM,OADH,CAdF,CADF,CAoBD,CAED,cAAe,SAASI,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,CACxC,mBACE,oBAAC,UAAD,EAAY,KAAK,CAAC,aAAlB,eACE,oBAAC,KAAD,mBACE,uDADF,oPADF,cAKE,oBAAC,UAAD,EAAY,UAAU,CAAE,CACtB,CACE,OAAQ,UADV,CAEE,aAAc,MAFhB,CADsB,CAKtB,CACE,OAAQ,4BADV,CAEE,aAAc,MAFhB,CALsB,CAStB,CACE,OAAQ,gDADV,CAEE,aAAc,MAFhB,CATsB,CAatB,CACE,OAAQ,yBADV,CAEE,aAAc,aAFhB,CAbsB,CAiBtB,CACE,OAAQ,sBADV,CAEE,aAAc,MAFhB,CAjBsB,CAAxB,EALF,cA2BE,oBAAC,IAAD,MA3BF,CADF,CA+BD","sourcesContent":["import React, { useState } from 'react';\nimport VisualPage, {\n  About,\n  Complexity,\n  Controls,\n  ControlGroup,\n  Visualization,\n} from '../VisualPage.js';\nimport {\n  Node,\n} from '../VisualComponents.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [end, setEnd] = useState(-1);\n  const [addVal, setAddVal] = useState();\n  const [searchVal, setSearchVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.slice();\n    let added = false;\n    const newItem = {\n      \"next\": addEnd ? -1 : start,\n      \"value\": addVal,\n      \"highlight\": false,\n    }\n\n    // Add new item in next undefined slot\n    let i = 0;\n    for (; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = newItem;\n        added = true;\n      }\n    }\n    if (!added) {\n      i = newList.length;\n      newList.push(newItem);\n    }\n\n    // Fix old last node's pointer if addEnd\n    if (addEnd) {\n      if (end === -1) {\n        setEnd(i);\n      } else {\n        newList[end].next = i;\n        setEnd(i);\n      }\n    } else {\n      setStart(i);\n      if (end === -1)\n        setEnd(i);\n    }\n    setList(newList);\n  }\n\n  function search() {\n    // TODO implement actual search animation\n    setList(list.map((v,i) => Object.assign({}, v, {\"highlight\": v.value === searchVal})));\n  }\n\n  // Generate the nodes in correct order for visualization\n  const ordered = [];\n  let i = start;\n  while (i !== -1) {\n    ordered.push(\n      <Node key={i} highlight={list[i].highlight}>{list[i].value}</Node>\n    );\n    i = list[i].next;\n  }\n  return (\n    <>\n      <Controls>\n        <ControlGroup>\n          <label htmlFor=\"add\">Add item</label>\n          <input name=\"add\" type=\"text\" onChange={e => setAddVal(e.target.value)}></input>\n          <button onClick={() => add(false)}>Add Front</button>\n          <button onClick={() => add(true)}>Add End</button>\n        </ControlGroup>\n        <ControlGroup>\n          <label htmlFor=\"search\">Search</label>\n          <input name=\"search\" onChange={e => setSearchVal(e.target.value)}></input>\n          <button onClick={search}>Search</button>\n        </ControlGroup>\n      </Controls>\n      <Visualization>\n        {ordered}\n      </Visualization>\n    </>\n  );\n}\n\nexport default function LinkedList(props) {\n  return (\n    <VisualPage title=\"Linked List\">\n      <About>\n        <h4>What is a Linked List?</h4>\n        Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\n      </About>\n      <Complexity complexity={[\n        {\n          \"name\": \"Indexing\",\n          \"complexity\": \"Θ(n)\"\n        },\n        {\n          \"name\": \"Insert/delete at beginning\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete at end (when last element known)\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete in middle\",\n          \"complexity\": \"Θ(n) + Θ(1)\",\n        },\n        {\n          \"name\": \"Average wasted space\",\n          \"complexity\": \"Θ(1)\",\n        },\n      ]}/>\n      <Demo />\n    </VisualPage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}