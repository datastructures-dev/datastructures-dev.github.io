{"ast":null,"code":"var _jsxFileName = \"/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js\";\nimport React, { useState } from 'react';\nimport VisualPage, { About, Complexity, Controls, ControlGroup, Visualization } from '../VisualPage.js';\nimport { Node } from '../VisualComponents.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [end, setEnd] = useState(-1);\n  const [addVal, setAddVal] = useState();\n  const [searchVal, setSearchVal] = useState();\n  const [removeVal, setRemoveVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.map(v => Object.assign({}, v, {\n      \"highlight\": false\n    }));\n    let added = false;\n    const newItem = {\n      \"next\": addEnd ? -1 : start,\n      \"value\": addVal,\n      \"highlight\": false\n    }; // Add new item in next undefined slot\n\n    let i = 0;\n\n    for (; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = newItem;\n        added = true;\n      }\n    }\n\n    if (!added) {\n      i = newList.length;\n      newList.push(newItem);\n    } // Fix old last node's pointer if addEnd\n\n\n    if (addEnd) {\n      if (end === -1) {\n        setEnd(i);\n      } else {\n        newList[end].next = i;\n        setEnd(i);\n      }\n\n      if (start === -1) setStart(i);\n    } else {\n      setStart(i);\n      if (end === -1) setEnd(i);\n    }\n\n    setList(newList);\n  }\n\n  function search() {\n    setList(list.map((v, i) => Object.assign({}, v, {\n      \"highlight\": false\n    })));\n    let index = start;\n    let visted = [];\n    var idx = null;\n    var found = false;\n    let cancel = setInterval(() => {\n      if (index === -1) {\n        setList(list.map((v, i) => Object.assign({}, v, {\n          \"highlight\": visted.includes(i) && v.value === searchVal\n        })));\n      }\n\n      setList(list.map((v, i) => Object.assign({}, v, {\n        \"highlight\": i === index || v.value === searchVal && visted.includes(i)\n      })));\n      visted.push(index); // If found item stop\n\n      if (index !== -1 && list[index].value === searchVal) {\n        idx = index;\n        index = -1;\n        found = true;\n        clearInterval(cancel);\n      } else {\n        index = list[index].next;\n      }\n    }, 1000);\n    return [found, idx, searchVal]; //return if something was found\n  } //make em global\n\n\n  var idx = null;\n  var found = false;\n\n  function searchRemove(searchVal) {\n    setList(list.map((v, i) => Object.assign({}, v, {\n      \"highlight\": false\n    })));\n    let index = start;\n    let visted = [];\n    let cancel = setInterval(() => {\n      if (index === -1) {\n        setList(list.map((v, i) => Object.assign({}, v, {\n          \"highlight\": false && v.value === searchVal\n        })));\n        clearInterval(cancel);\n        return;\n      }\n\n      setList(list.map((v, i) => Object.assign({}, v, {\n        \"highlight\": false || v.value === searchVal && visted.includes(i)\n      })));\n      visted.push(index); // If found item stop\n\n      if (index !== -1 && list[index].value === searchVal) {\n        idx = index;\n        index = -1;\n        found = true; //console.log(\"Found\")\n      } else {\n        index = list[index].next;\n      }\n    }, 0);\n  }\n\n  function remove() {\n    searchRemove(removeVal);\n    setTimeout(function () {\n      console.log(found, idx);\n\n      if (found === false) {\n        alert(\"Value: \" + removeVal + \" is not in the list\");\n      } else {\n        //found something. Kill it\n        var nl = Object.assign([], list);\n        var prev = null; //prev pointer\n\n        var index = start;\n\n        while (index !== idx) {\n          prev = index;\n          index = list[index].next;\n        }\n\n        var next = list[index].next; //next pointer\n\n        nl[prev].next = next;\n        setList(nl);\n      }\n    }, 100);\n  } // Generate the nodes in correct order for visualization\n\n\n  const ordered = [];\n  let i = start;\n\n  while (i !== -1) {\n    ordered.push( /*#__PURE__*/React.createElement(Node, {\n      key: i,\n      highlight: list[i].highlight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, list[i].value));\n    i = list[i].next;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, \"Add item\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"add\",\n    type: \"text\",\n    onChange: e => setAddVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => add(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"Add Front\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => add(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, \"Add End\")), /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"search\",\n    onChange: e => setSearchVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"remove\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }, \"Remove\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"remove\",\n    onChange: e => setRemoveVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: remove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, \"Remove\"))), /*#__PURE__*/React.createElement(Visualization, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, ordered));\n}\n\nexport default function LinkedList(props) {\n  return /*#__PURE__*/React.createElement(VisualPage, {\n    title: \"Linked List\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(About, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, \"What is a Linked List?\"), \"Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\"), /*#__PURE__*/React.createElement(Complexity, {\n    complexity: [{\n      \"name\": \"Indexing\",\n      \"complexity\": \"Θ(n)\"\n    }, {\n      \"name\": \"Insert/delete at beginning\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Insert/delete at end (when last element known)\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Insert/delete in middle\",\n      \"complexity\": \"Θ(n) + Θ(1)\"\n    }, {\n      \"name\": \"Average wasted space\",\n      \"complexity\": \"Θ(1)\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Demo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js"],"names":["React","useState","VisualPage","About","Complexity","Controls","ControlGroup","Visualization","Node","Demo","list","setList","start","setStart","end","setEnd","addVal","setAddVal","searchVal","setSearchVal","removeVal","setRemoveVal","add","addEnd","newList","map","v","Object","assign","added","newItem","i","length","undefined","push","next","search","index","visted","idx","found","cancel","setInterval","includes","value","clearInterval","searchRemove","remove","setTimeout","console","log","alert","nl","prev","ordered","highlight","e","target","LinkedList","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,IACEC,KADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,YAJF,EAKEC,aALF,QAMO,kBANP;AAOA,SACEC,IADF,QAEO,wBAFP;;AAKA,SAASC,IAAT,GAAgB;AACd,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAC,CAAF,CAAlC;AACA,QAAM,CAACa,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,CAAC,CAAC,CAAF,CAA9B;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,EAApC;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,EAA1C;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,EAA1C;;AAEA,WAASqB,GAAT,CAAaC,MAAb,EAAqB;AACnB,QAAIC,OAAO,GAAGd,IAAI,CAACe,GAAL,CAASC,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAC/C,mBAAa;AADkC,KAArB,CAAd,CAAd;AAGA,QAAIG,KAAK,GAAG,KAAZ;AACA,UAAMC,OAAO,GAAG;AACd,cAAQP,MAAM,GAAG,CAAC,CAAJ,GAAQX,KADR;AAEd,eAASI,MAFK;AAGd,mBAAa;AAHC,KAAhB,CALmB,CAUnB;;AACA,QAAIe,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGP,OAAO,CAACQ,MAAZ,IAAsB,CAACH,KAA9B,EAAqCE,CAAC,EAAtC,EAA0C;AACxC,UAAIP,OAAO,CAACO,CAAD,CAAP,KAAeE,SAAnB,EAA8B;AAC5BT,QAAAA,OAAO,CAACO,CAAD,CAAP,GAAaD,OAAb;AACAD,QAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AACD,QAAI,CAACA,KAAL,EAAY;AACVE,MAAAA,CAAC,GAAGP,OAAO,CAACQ,MAAZ;AACAR,MAAAA,OAAO,CAACU,IAAR,CAAaJ,OAAb;AACD,KArBkB,CAuBnB;;;AACA,QAAIP,MAAJ,EAAY;AACV,UAAIT,GAAG,KAAK,CAAC,CAAb,EAAgB;AACdC,QAAAA,MAAM,CAACgB,CAAD,CAAN;AACD,OAFD,MAEO;AACLP,QAAAA,OAAO,CAACV,GAAD,CAAP,CAAaqB,IAAb,GAAoBJ,CAApB;AACAhB,QAAAA,MAAM,CAACgB,CAAD,CAAN;AACD;;AAED,UAAInB,KAAK,KAAK,CAAC,CAAf,EACEC,QAAQ,CAACkB,CAAD,CAAR;AACH,KAVD,MAUO;AACLlB,MAAAA,QAAQ,CAACkB,CAAD,CAAR;AACA,UAAIjB,GAAG,KAAK,CAAC,CAAb,EACEC,MAAM,CAACgB,CAAD,CAAN;AACH;;AACDpB,IAAAA,OAAO,CAACa,OAAD,CAAP;AACD;;AAGD,WAASY,MAAT,GAAkB;AAChBzB,IAAAA,OAAO,CAACD,IAAI,CAACe,GAAL,CAAS,CAACC,CAAD,EAAIK,CAAJ,KAAUJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAC9C,mBAAa;AADiC,KAArB,CAAnB,CAAD,CAAP;AAIA,QAAIW,KAAK,GAAGzB,KAAZ;AACA,QAAI0B,MAAM,GAAG,EAAb;AACA,QAAIC,GAAG,GAAG,IAAV;AACA,QAAIC,KAAK,GAAG,KAAZ;AACA,QAAIC,MAAM,GAAGC,WAAW,CAAC,MAAM;AAC7B,UAAIL,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB1B,QAAAA,OAAO,CAACD,IAAI,CAACe,GAAL,CAAS,CAACC,CAAD,EAAIK,CAAJ,KAAUJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAC9C,uBAAaY,MAAM,CAACK,QAAP,CAAgBZ,CAAhB,KACRL,CAAC,CAACkB,KAAF,KAAY1B;AAF6B,SAArB,CAAnB,CAAD,CAAP;AAID;;AACDP,MAAAA,OAAO,CAACD,IAAI,CAACe,GAAL,CAAS,CAACC,CAAD,EAAIK,CAAJ,KAAUJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAC9C,qBAAaK,CAAC,KAAKM,KAAN,IACPX,CAAC,CAACkB,KAAF,KAAY1B,SAAZ,IAAyBoB,MAAM,CAACK,QAAP,CAAgBZ,CAAhB;AAFe,OAArB,CAAnB,CAAD,CAAP;AAIAO,MAAAA,MAAM,CAACJ,IAAP,CAAYG,KAAZ,EAX6B,CAa7B;;AACA,UAAIA,KAAK,KAAK,CAAC,CAAX,IAAgB3B,IAAI,CAAC2B,KAAD,CAAJ,CAAYO,KAAZ,KAAsB1B,SAA1C,EAAqD;AACnDqB,QAAAA,GAAG,GAAGF,KAAN;AACAA,QAAAA,KAAK,GAAG,CAAC,CAAT;AACAG,QAAAA,KAAK,GAAG,IAAR;AACAK,QAAAA,aAAa,CAACJ,MAAD,CAAb;AACD,OALD,MAKO;AACLJ,QAAAA,KAAK,GAAG3B,IAAI,CAAC2B,KAAD,CAAJ,CAAYF,IAApB;AACD;AACF,KAtBuB,EAsBrB,IAtBqB,CAAxB;AAwBA,WAAO,CAACK,KAAD,EAAQD,GAAR,EAAarB,SAAb,CAAP,CAjCgB,CAiCe;AAEhC,GAtFa,CAwFd;;;AACA,MAAIqB,GAAG,GAAG,IAAV;AACA,MAAIC,KAAK,GAAG,KAAZ;;AAEA,WAASM,YAAT,CAAsB5B,SAAtB,EAAiC;AAC/BP,IAAAA,OAAO,CAACD,IAAI,CAACe,GAAL,CAAS,CAACC,CAAD,EAAIK,CAAJ,KAAUJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAC9C,mBAAa;AADiC,KAArB,CAAnB,CAAD,CAAP;AAIA,QAAIW,KAAK,GAAGzB,KAAZ;AACA,QAAI0B,MAAM,GAAG,EAAb;AAEA,QAAIG,MAAM,GAAGC,WAAW,CAAC,MAAM;AAC7B,UAAIL,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB1B,QAAAA,OAAO,CAACD,IAAI,CAACe,GAAL,CAAS,CAACC,CAAD,EAAIK,CAAJ,KAAUJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAC9C,uBAAa,SACRA,CAAC,CAACkB,KAAF,KAAY1B;AAF6B,SAArB,CAAnB,CAAD,CAAP;AAIA2B,QAAAA,aAAa,CAACJ,MAAD,CAAb;AACA;AAED;;AACD9B,MAAAA,OAAO,CAACD,IAAI,CAACe,GAAL,CAAS,CAACC,CAAD,EAAIK,CAAJ,KAAUJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAC9C,qBAAa,SACPA,CAAC,CAACkB,KAAF,KAAY1B,SAAZ,IAAyBoB,MAAM,CAACK,QAAP,CAAgBZ,CAAhB;AAFe,OAArB,CAAnB,CAAD,CAAP;AAIAO,MAAAA,MAAM,CAACJ,IAAP,CAAYG,KAAZ,EAd6B,CAgB7B;;AACA,UAAIA,KAAK,KAAK,CAAC,CAAX,IAAgB3B,IAAI,CAAC2B,KAAD,CAAJ,CAAYO,KAAZ,KAAsB1B,SAA1C,EAAqD;AACnDqB,QAAAA,GAAG,GAAGF,KAAN;AACAA,QAAAA,KAAK,GAAG,CAAC,CAAT;AACAG,QAAAA,KAAK,GAAG,IAAR,CAHmD,CAInD;AAED,OAND,MAMO;AACLH,QAAAA,KAAK,GAAG3B,IAAI,CAAC2B,KAAD,CAAJ,CAAYF,IAApB;AACD;AACF,KA1BuB,EA0BrB,CA1BqB,CAAxB;AA6BD;;AAGD,WAASY,MAAT,GAAkB;AAChBD,IAAAA,YAAY,CAAC1B,SAAD,CAAZ;AACA4B,IAAAA,UAAU,CAAC,YAAY;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ,EAAmBD,GAAnB;;AACA,UAAIC,KAAK,KAAK,KAAd,EAAqB;AACnBW,QAAAA,KAAK,CAAC,YAAY/B,SAAZ,GAAwB,qBAAzB,CAAL;AACD,OAFD,MAEO;AACH;AACA,YAAIgC,EAAE,GAACzB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBlB,IAAjB,CAAP;AACA,YAAI2C,IAAI,GAAC,IAAT,CAHG,CAGW;;AACd,YAAIhB,KAAK,GAACzB,KAAV;;AACA,eAAMyB,KAAK,KAAKE,GAAhB,EAAoB;AAChBc,UAAAA,IAAI,GAAChB,KAAL;AACAA,UAAAA,KAAK,GAAG3B,IAAI,CAAC2B,KAAD,CAAJ,CAAYF,IAApB;AACH;;AACD,YAAIA,IAAI,GAACzB,IAAI,CAAC2B,KAAD,CAAJ,CAAYF,IAArB,CATG,CASuB;;AAC1BiB,QAAAA,EAAE,CAACC,IAAD,CAAF,CAASlB,IAAT,GAAgBA,IAAhB;AACAxB,QAAAA,OAAO,CAACyC,EAAD,CAAP;AAEH;AAEF,KAnBS,EAmBP,GAnBO,CAAV;AAoBD,GA1Ja,CA6Jd;;;AACA,QAAME,OAAO,GAAG,EAAhB;AACA,MAAIvB,CAAC,GAAGnB,KAAR;;AACA,SAAOmB,CAAC,KAAK,CAAC,CAAd,EAAiB;AACfuB,IAAAA,OAAO,CAACpB,IAAR,eACE,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEH,CAAX;AAAc,MAAA,SAAS,EAAErB,IAAI,CAACqB,CAAD,CAAJ,CAAQwB,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6C7C,IAAI,CAACqB,CAAD,CAAJ,CAAQa,KAArD,CADF;AAGAb,IAAAA,CAAC,GAAGrB,IAAI,CAACqB,CAAD,CAAJ,CAAQI,IAAZ;AACD;;AACD,sBACE,uDACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,IAAA,IAAI,EAAC,KAAZ;AAAkB,IAAA,IAAI,EAAC,MAAvB;AAA8B,IAAA,QAAQ,EAAEqB,CAAC,IAAIvC,SAAS,CAACuC,CAAC,CAACC,MAAF,CAASb,KAAV,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,OAAO,EAAE,MAAMtB,GAAG,CAAC,KAAD,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,eAIE;AAAQ,IAAA,OAAO,EAAE,MAAMA,GAAG,CAAC,IAAD,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CADF,eAOE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,QAAQ,EAAEkC,CAAC,IAAIrC,YAAY,CAACqC,CAAC,CAACC,MAAF,CAASb,KAAV,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,OAAO,EAAER,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CAPF,eAYE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,QAAQ,EAAEoB,CAAC,IAAInC,YAAY,CAACmC,CAAC,CAACC,MAAF,CAASb,KAAV,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,OAAO,EAAEG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CAZF,CADF,eAmBE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,OADH,CAnBF,CADF;AAyBD;;AAED,eAAe,SAASI,UAAT,CAAoBC,KAApB,EAA2B;AACxC,sBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,qPADF,eAKE,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAE,CACtB;AACE,cAAQ,UADV;AAEE,oBAAc;AAFhB,KADsB,EAKtB;AACE,cAAQ,4BADV;AAEE,oBAAc;AAFhB,KALsB,EAStB;AACE,cAAQ,gDADV;AAEE,oBAAc;AAFhB,KATsB,EAatB;AACE,cAAQ,yBADV;AAEE,oBAAc;AAFhB,KAbsB,EAiBtB;AACE,cAAQ,sBADV;AAEE,oBAAc;AAFhB,KAjBsB,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eA2BE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CADF;AA+BD","sourcesContent":["import React, { useState } from 'react';\nimport VisualPage, {\n  About,\n  Complexity,\n  Controls,\n  ControlGroup,\n  Visualization,\n} from '../VisualPage.js';\nimport {\n  Node,\n} from '../VisualComponents.js';\n\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [end, setEnd] = useState(-1);\n  const [addVal, setAddVal] = useState();\n  const [searchVal, setSearchVal] = useState();\n  const [removeVal, setRemoveVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.map(v => Object.assign({}, v, {\n      \"highlight\": false,\n    }));\n    let added = false;\n    const newItem = {\n      \"next\": addEnd ? -1 : start,\n      \"value\": addVal,\n      \"highlight\": false,\n    }\n    // Add new item in next undefined slot\n    let i = 0;\n    for (; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = newItem;\n        added = true;\n      }\n    }\n    if (!added) {\n      i = newList.length;\n      newList.push(newItem);\n    }\n\n    // Fix old last node's pointer if addEnd\n    if (addEnd) {\n      if (end === -1) {\n        setEnd(i);\n      } else {\n        newList[end].next = i;\n        setEnd(i);\n      }\n\n      if (start === -1)\n        setStart(i);\n    } else {\n      setStart(i);\n      if (end === -1)\n        setEnd(i);\n    }\n    setList(newList);\n  }\n\n\n  function search() {\n    setList(list.map((v, i) => Object.assign({}, v, {\n      \"highlight\": false,\n    })));\n\n    let index = start;\n    let visted = [];\n    var idx = null;\n    var found = false;\n    let cancel = setInterval(() => {\n      if (index === -1) {\n        setList(list.map((v, i) => Object.assign({}, v, {\n          \"highlight\": visted.includes(i)\n            && v.value === searchVal,\n        })));\n      }\n      setList(list.map((v, i) => Object.assign({}, v, {\n        \"highlight\": i === index\n          || (v.value === searchVal && visted.includes(i)),\n      })));\n      visted.push(index);\n\n      // If found item stop\n      if (index !== -1 && list[index].value === searchVal) {\n        idx = index\n        index = -1;\n        found = true;\n        clearInterval(cancel)\n      } else {\n        index = list[index].next;\n      }\n    }, 1000);\n\n    return [found, idx, searchVal] //return if something was found\n\n  }\n\n  //make em global\n  var idx = null;\n  var found = false;\n\n  function searchRemove(searchVal) {\n    setList(list.map((v, i) => Object.assign({}, v, {\n      \"highlight\": false,\n    })));\n\n    let index = start;\n    let visted = [];\n\n    let cancel = setInterval(() => {\n      if (index === -1) {\n        setList(list.map((v, i) => Object.assign({}, v, {\n          \"highlight\": false\n            && v.value === searchVal,\n        })));\n        clearInterval(cancel)\n        return;\n\n      }\n      setList(list.map((v, i) => Object.assign({}, v, {\n        \"highlight\": false\n          || (v.value === searchVal && visted.includes(i)),\n      })));\n      visted.push(index);\n\n      // If found item stop\n      if (index !== -1 && list[index].value === searchVal) {\n        idx = index\n        index = -1;\n        found = true;\n        //console.log(\"Found\")\n\n      } else {\n        index = list[index].next;\n      }\n    }, 0);\n\n\n  }\n\n\n  function remove() {\n    searchRemove(removeVal)\n    setTimeout(function () {\n      console.log(found, idx)\n      if (found === false) {\n        alert(\"Value: \" + removeVal + \" is not in the list\")\n      } else {\n          //found something. Kill it\n          var nl=Object.assign([],list)\n          var prev=null //prev pointer\n          var index=start;\n          while(index !== idx){\n              prev=index\n              index = list[index].next\n          }\n          var next=list[index].next //next pointer\n          nl[prev].next = next\n          setList(nl)\n\n      }\n\n    }, 100);\n  }\n\n\n  // Generate the nodes in correct order for visualization\n  const ordered = [];\n  let i = start;\n  while (i !== -1) {\n    ordered.push(\n      <Node key={i} highlight={list[i].highlight}>{list[i].value}</Node>\n    );\n    i = list[i].next;\n  }\n  return (\n    <>\n      <Controls>\n        <ControlGroup>\n          <label htmlFor=\"add\">Add item</label>\n          <input name=\"add\" type=\"text\" onChange={e => setAddVal(e.target.value)}></input>\n          <button onClick={() => add(false)}>Add Front</button>\n          <button onClick={() => add(true)}>Add End</button>\n        </ControlGroup>\n        <ControlGroup>\n          <label htmlFor=\"search\">Search</label>\n          <input name=\"search\" onChange={e => setSearchVal(e.target.value)}></input>\n          <button onClick={search}>Search</button>\n        </ControlGroup>\n        <ControlGroup>\n          <label htmlFor=\"remove\">Remove</label>\n          <input name=\"remove\" onChange={e => setRemoveVal(e.target.value)}></input>\n          <button onClick={remove}>Remove</button>\n        </ControlGroup>\n      </Controls>\n      <Visualization>\n        {ordered}\n      </Visualization>\n    </>\n  );\n}\n\nexport default function LinkedList(props) {\n  return (\n    <VisualPage title=\"Linked List\">\n      <About>\n        <h4>What is a Linked List?</h4>\n        Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\n      </About>\n      <Complexity complexity={[\n        {\n          \"name\": \"Indexing\",\n          \"complexity\": \"Θ(n)\"\n        },\n        {\n          \"name\": \"Insert/delete at beginning\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete at end (when last element known)\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete in middle\",\n          \"complexity\": \"Θ(n) + Θ(1)\",\n        },\n        {\n          \"name\": \"Average wasted space\",\n          \"complexity\": \"Θ(1)\",\n        },\n      ]} />\n      <Demo />\n    </VisualPage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}