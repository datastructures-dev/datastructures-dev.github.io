{"ast":null,"code":"import _toConsumableArray from\"/home/dan/Projects/datastructures.dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/dan/Projects/datastructures.dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import VisualPage,{About,Complexity,Controls,ControlGroup,Visualization}from'../VisualPage.js';function Demo(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),list=_useState2[0],setList=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),val=_useState4[0],setVal=_useState4[1];function addStart(){setList([{\"value\":val,\"highlight\":false}].concat(_toConsumableArray(list)));}function addEnd(){setList([].concat(_toConsumableArray(list),[{\"value\":val,\"highlight\":false}]));}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Controls,null,/*#__PURE__*/React.createElement(ControlGroup,null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"add\"},\"Add item\"),/*#__PURE__*/React.createElement(\"input\",{name:\"add\",type:\"text\",onChange:function onChange(e){return setVal(e.target.value);}}),/*#__PURE__*/React.createElement(\"button\",{onClick:addStart},\"Add Front\"),/*#__PURE__*/React.createElement(\"button\",{onClick:addEnd},\"Add End\"))),/*#__PURE__*/React.createElement(Visualization,null,list.map(function(i){return/*#__PURE__*/React.createElement(\"span\",null,i.value);})));}export default function LinkedList(props){return/*#__PURE__*/React.createElement(VisualPage,{title:\"Linked List\"},/*#__PURE__*/React.createElement(About,null,/*#__PURE__*/React.createElement(\"h4\",null,\"What is a Linked List?\"),\"Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\"),/*#__PURE__*/React.createElement(Complexity,{complexity:[{\"name\":\"Indexing\",\"complexity\":\"Θ(n)\"},{\"name\":\"Insert/delete at beginning\",\"complexity\":\"Θ(1)\"},{\"name\":\"Insert/delete at end (when last element known)\",\"complexity\":\"Θ(1)\"},{\"name\":\"Insert/delete in middle\",\"complexity\":\"Θ(n) + Θ(1)\"},{\"name\":\"Average wasted space\",\"complexity\":\"Θ(1)\"}]}),/*#__PURE__*/React.createElement(Demo,null));}","map":{"version":3,"sources":["/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js"],"names":["React","useState","VisualPage","About","Complexity","Controls","ControlGroup","Visualization","Demo","list","setList","val","setVal","addStart","addEnd","e","target","value","map","i","LinkedList","props"],"mappings":"gUAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,UAAP,EACEC,KADF,CAEEC,UAFF,CAGEC,QAHF,CAIEC,YAJF,CAKEC,aALF,KAMO,kBANP,CAQA,QAASC,CAAAA,IAAT,EAAgB,eACUP,QAAQ,CAAC,EAAD,CADlB,wCACPQ,IADO,eACDC,OADC,8BAEQT,QAAQ,EAFhB,yCAEPU,GAFO,eAEFC,MAFE,eAId,QAASC,CAAAA,QAAT,EAAoB,CAClBH,OAAO,EACL,CACE,QAASC,GADX,CAEE,YAAa,KAFf,CADK,4BAKFF,IALE,GAAP,CAOD,CAED,QAASK,CAAAA,MAAT,EAAkB,CAChBJ,OAAO,8BACFD,IADE,GAEL,CACE,QAASE,GADX,CAEE,YAAa,KAFf,CAFK,GAAP,CAOD,CAED,mBACE,qDACE,oBAAC,QAAD,mBACE,oBAAC,YAAD,mBACE,6BAAO,OAAO,CAAC,KAAf,aADF,cAEE,6BAAO,IAAI,CAAC,KAAZ,CAAkB,IAAI,CAAC,MAAvB,CAA8B,QAAQ,CAAE,kBAAAI,CAAC,QAAIH,CAAAA,MAAM,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV,EAAzC,EAFF,cAGE,8BAAQ,OAAO,CAAEJ,QAAjB,cAHF,cAIE,8BAAQ,OAAO,CAAEC,MAAjB,YAJF,CADF,CADF,cASE,oBAAC,aAAD,MACGL,IAAI,CAACS,GAAL,CAAS,SAAAC,CAAC,qBAAI,gCAAOA,CAAC,CAACF,KAAT,CAAJ,EAAV,CADH,CATF,CADF,CAeD,CAED,cAAe,SAASG,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,CACxC,mBACE,oBAAC,UAAD,EAAY,KAAK,CAAC,aAAlB,eACE,oBAAC,KAAD,mBACE,uDADF,oPADF,cAKE,oBAAC,UAAD,EAAY,UAAU,CAAE,CACtB,CACE,OAAQ,UADV,CAEE,aAAc,MAFhB,CADsB,CAKtB,CACE,OAAQ,4BADV,CAEE,aAAc,MAFhB,CALsB,CAStB,CACE,OAAQ,gDADV,CAEE,aAAc,MAFhB,CATsB,CAatB,CACE,OAAQ,yBADV,CAEE,aAAc,aAFhB,CAbsB,CAiBtB,CACE,OAAQ,sBADV,CAEE,aAAc,MAFhB,CAjBsB,CAAxB,EALF,cA2BE,oBAAC,IAAD,MA3BF,CADF,CA+BD","sourcesContent":["import React, { useState } from 'react';\nimport VisualPage, {\n  About,\n  Complexity,\n  Controls,\n  ControlGroup,\n  Visualization,\n} from '../VisualPage.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [val, setVal] = useState();\n\n  function addStart() {\n    setList([\n      {\n        \"value\": val,\n        \"highlight\": false,\n      },\n      ...list\n    ]);\n  }\n\n  function addEnd() {\n    setList([\n      ...list,\n      {\n        \"value\": val,\n        \"highlight\": false,\n      },\n    ]);\n  }\n\n  return (\n    <>\n      <Controls>\n        <ControlGroup>\n          <label htmlFor=\"add\">Add item</label>\n          <input name=\"add\" type=\"text\" onChange={e => setVal(e.target.value)}></input>\n          <button onClick={addStart}>Add Front</button>\n          <button onClick={addEnd}>Add End</button>\n        </ControlGroup>\n      </Controls>\n      <Visualization>\n        {list.map(i => <span>{i.value}</span>)}\n      </Visualization>\n    </>\n  );\n}\n\nexport default function LinkedList(props) {\n  return (\n    <VisualPage title=\"Linked List\">\n      <About>\n        <h4>What is a Linked List?</h4>\n        Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\n      </About>\n      <Complexity complexity={[\n        {\n          \"name\": \"Indexing\",\n          \"complexity\": \"Θ(n)\"\n        },\n        {\n          \"name\": \"Insert/delete at beginning\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete at end (when last element known)\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete in middle\",\n          \"complexity\": \"Θ(n) + Θ(1)\",\n        },\n        {\n          \"name\": \"Average wasted space\",\n          \"complexity\": \"Θ(1)\",\n        },\n      ]}/>\n      <Demo />\n    </VisualPage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}