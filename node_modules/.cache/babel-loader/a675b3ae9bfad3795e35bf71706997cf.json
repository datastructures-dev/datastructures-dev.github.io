{"ast":null,"code":"var _jsxFileName = \"/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js\";\nimport React, { useState } from 'react';\nimport VisualPage, { About, Complexity, Controls, ControlGroup, Visualization } from '../VisualPage.js';\nimport { Node } from '../VisualComponents.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [val, setVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.slice();\n    let added = false;\n\n    for (let i = 0; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = {\n          \"next\": addEnd ? start : -1,\n          \"value\": val,\n          \"hihlight\": false\n        };\n        added = true;\n      }\n    }\n\n    setList(newList);\n  }\n\n  function addEnd() {\n    setList([...list, {\n      \"value\": val,\n      \"highlight\": true\n    }]);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Add item\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"add\",\n    type: \"text\",\n    onChange: e => setVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"Add Front\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"Add End\"))), /*#__PURE__*/React.createElement(Visualization, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, list.map((v, i) => /*#__PURE__*/React.createElement(Node, {\n    key: i,\n    highlight: v.highlight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 28\n    }\n  }, v.value))));\n}\n\nexport default function LinkedList(props) {\n  return /*#__PURE__*/React.createElement(VisualPage, {\n    title: \"Linked List\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(About, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"What is a Linked List?\"), \"Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\"), /*#__PURE__*/React.createElement(Complexity, {\n    complexity: [{\n      \"name\": \"Indexing\",\n      \"complexity\": \"Θ(n)\"\n    }, {\n      \"name\": \"Insert/delete at beginning\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Insert/delete at end (when last element known)\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Insert/delete in middle\",\n      \"complexity\": \"Θ(n) + Θ(1)\"\n    }, {\n      \"name\": \"Average wasted space\",\n      \"complexity\": \"Θ(1)\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Demo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/dan/Projects/datastructures.dev/src/Data-Structures/linked-list.js"],"names":["React","useState","VisualPage","About","Complexity","Controls","ControlGroup","Visualization","Node","Demo","list","setList","start","setStart","val","setVal","add","addEnd","newList","slice","added","i","length","undefined","e","target","value","addStart","map","v","highlight","LinkedList","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport VisualPage, {\n  About,\n  Complexity,\n  Controls,\n  ControlGroup,\n  Visualization,\n} from '../VisualPage.js';\nimport {\n  Node,\n} from '../VisualComponents.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [val, setVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.slice();\n    let added = false;\n    for (let i = 0; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = {\n          \"next\": addEnd ? start : -1,\n          \"value\": val,\n          \"hihlight\": false,\n        }\n        added = true;\n      }\n    }\n    setList(newList);\n  }\n\n  function addEnd() {\n    setList([\n      ...list,\n      {\n        \"value\": val,\n        \"highlight\": true,\n      },\n    ]);\n  }\n\n  return (\n    <>\n      <Controls>\n        <ControlGroup>\n          <label htmlFor=\"add\">Add item</label>\n          <input name=\"add\" type=\"text\" onChange={e => setVal(e.target.value)}></input>\n          <button onClick={addStart}>Add Front</button>\n          <button onClick={addEnd}>Add End</button>\n        </ControlGroup>\n      </Controls>\n      <Visualization>\n        {list.map((v,i) => <Node key={i} highlight={v.highlight}>{v.value}</Node>)}\n      </Visualization>\n    </>\n  );\n}\n\nexport default function LinkedList(props) {\n  return (\n    <VisualPage title=\"Linked List\">\n      <About>\n        <h4>What is a Linked List?</h4>\n        Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain.\n      </About>\n      <Complexity complexity={[\n        {\n          \"name\": \"Indexing\",\n          \"complexity\": \"Θ(n)\"\n        },\n        {\n          \"name\": \"Insert/delete at beginning\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete at end (when last element known)\",\n          \"complexity\": \"Θ(1)\"\n        },\n        {\n          \"name\": \"Insert/delete in middle\",\n          \"complexity\": \"Θ(n) + Θ(1)\",\n        },\n        {\n          \"name\": \"Average wasted space\",\n          \"complexity\": \"Θ(1)\",\n        },\n      ]}/>\n      <Demo />\n    </VisualPage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}