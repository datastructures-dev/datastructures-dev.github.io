{"ast":null,"code":"var _jsxFileName = \"/home/dan/Projects/datastructures.dev/src/Data-Structures/queue.js\";\nimport React, { useState } from 'react';\nimport VisualPage, { About, Complexity, Controls, ControlGroup, Visualization } from '../VisualPage.js';\nimport { Node } from '../VisualComponents.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [end, setEnd] = useState(-1);\n  const [addVal, setAddVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.map(v => Object.assign({}, v, {\n      \"highlight\": false\n    }));\n    let added = false;\n    const newItem = {\n      \"next\": addEnd ? -1 : start,\n      \"value\": addVal,\n      \"highlight\": false\n    }; // Add new item in next undefined slot\n\n    let i = 0;\n\n    for (; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = newItem;\n        added = true;\n      }\n    }\n\n    if (!added) {\n      i = newList.length;\n      newList.push(newItem);\n    } // Fix old last node's pointer if addEnd\n\n\n    if (addEnd) {\n      if (end === -1) {\n        //null list\n        setStart(i);\n        setEnd(i);\n      } else {\n        newList[end].next = i;\n        setEnd(i);\n      }\n    } else {\n      setStart(i);\n      if (end === -1) setEnd(i);\n    }\n\n    console.log(\"adding: \" + newList);\n    setList(newList);\n  }\n\n  function remove() {\n    //found something. Kill it\n    var nl = Object.assign([], list);\n    var index = start;\n\n    if (start === -1) {\n      alert(\"Dequeuing from null\");\n    } else {\n      var nxt = nl[index].next; //nl[index].next = nxt\n\n      if (nxt === -1) {\n        //next is empty\n        console.log(\"Empyting everything\");\n        setEnd(-1);\n        setStart(-1);\n        setList([]);\n      } else {\n        //fix this\n        console.log(nxt + \" \" + start + \" \" + end);\n        console.log(nl);\n        nl.splice(index, 1);\n        setStart(nxt);\n        setList(nl);\n        console.log(nl);\n      }\n    }\n  } // Generate the nodes in correct order for visualization\n\n\n  const ordered = [];\n  let i = start;\n\n  while (i !== -1) {\n    console.log(\"Here: \" + i);\n    ordered.push( /*#__PURE__*/React.createElement(Node, {\n      key: i,\n      highlight: list[i].highlight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, list[i].value));\n    i = list[i].next;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Add item\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"add\",\n    type: \"text\",\n    onChange: e => setAddVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => add(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"Enqueue\")), /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: remove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Dequeue\"))), /*#__PURE__*/React.createElement(Visualization, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, ordered));\n}\n\nexport default function Queue(props) {\n  return /*#__PURE__*/React.createElement(VisualPage, {\n    title: \"Queue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(About, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"What is a Queue?\"), \"Stacks are a FIFO (first in- first out) structure. They are used in a lot of reactive and UI related tasks, think back button on browsers\"), /*#__PURE__*/React.createElement(Complexity, {\n    complexity: [{\n      \"name\": \"Indexing\",\n      \"complexity\": \"Θ(n)\"\n    }, {\n      \"name\": \"Enqueue/Dequeue Element\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Average wasted space\",\n      \"complexity\": \"Θ(1)\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Demo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/dan/Projects/datastructures.dev/src/Data-Structures/queue.js"],"names":["React","useState","VisualPage","About","Complexity","Controls","ControlGroup","Visualization","Node","Demo","list","setList","start","setStart","end","setEnd","addVal","setAddVal","add","addEnd","newList","map","v","Object","assign","added","newItem","i","length","undefined","push","next","console","log","remove","nl","index","alert","nxt","splice","ordered","highlight","value","e","target","Queue","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport VisualPage, {\n  About,\n  Complexity,\n  Controls,\n  ControlGroup,\n  Visualization,\n} from '../VisualPage.js';\nimport {\n  Node,\n} from '../VisualComponents.js';\n\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [start, setStart] = useState(-1);\n  const [end, setEnd] = useState(-1);\n  const [addVal, setAddVal] = useState();\n\n  function add(addEnd) {\n    let newList = list.map(v => Object.assign({}, v, {\n      \"highlight\": false,\n    }));\n    let added = false;\n    const newItem = {\n      \"next\": addEnd ? -1 : start,\n      \"value\": addVal,\n      \"highlight\": false,\n    }\n    // Add new item in next undefined slot\n    let i = 0;\n    for (; i < newList.length && !added; i++) {\n      if (newList[i] === undefined) {\n        newList[i] = newItem;\n        added = true;\n      }\n    }\n    if (!added) {\n      i = newList.length;\n      newList.push(newItem);\n    }\n\n    // Fix old last node's pointer if addEnd\n    if (addEnd) {\n      if (end === -1) {\n        //null list\n        setStart(i)\n        setEnd(i);\n      } else {\n        newList[end].next = i;\n        setEnd(i);\n      }\n    } else {\n      setStart(i);\n      if (end === -1)\n        setEnd(i);\n    }\n    console.log(\"adding: \"+newList)\n    setList(newList);\n  }\n\n\n  \n  \n\n  function remove() {\n    \n        //found something. Kill it\n        var nl = Object.assign([], list)\n        var index = start;\n        if(start===-1){\n            alert(\"Dequeuing from null\")\n        }else{\n            var nxt = nl[index].next \n          //nl[index].next = nxt\n          if(nxt===-1){\n            //next is empty\n            console.log(\"Empyting everything\")\n            setEnd(-1)\n            setStart(-1)\n            setList([])\n          }else{\n            //fix this\n            console.log(nxt+\" \"+start+\" \"+end)\n            console.log(nl)\n            nl.splice(index,1)\n            setStart(nxt)\n            setList(nl)\n            console.log(nl)\n\n          }\n        }\n        \n  }\n\n\n  // Generate the nodes in correct order for visualization\n  const ordered = [];\n  let i = start;\n  while (i !== -1) {\n    console.log(\"Here: \"+i)\n    ordered.push(\n      <Node key={i} highlight={list[i].highlight}>{list[i].value}</Node>\n    );\n    i = list[i].next;\n  }\n  return (\n    <>\n      <Controls>\n        <ControlGroup>\n          <label htmlFor=\"add\">Add item</label>\n          <input name=\"add\" type=\"text\" onChange={e => setAddVal(e.target.value)}></input>\n          <button onClick={() => add(true)}>Enqueue</button>\n        </ControlGroup>\n        \n        <ControlGroup>\n          {/* <label htmlFor=\"remove\">Remove</label> */}\n          {/* <input name=\"remove\" onChange={e => setRemoveVal(e.target.value)}></input> */}\n          <button onClick={remove}>Dequeue</button>\n        </ControlGroup>\n      \n      </Controls>\n      <Visualization>\n        {ordered}\n      </Visualization>\n    </>\n  );\n}\n\nexport default function Queue(props) {\n  return (\n    <VisualPage title=\"Queue\">\n      <About>\n        <h4>What is a Queue?</h4>\n        Stacks are a FIFO (first in- first out) structure. They are used in a lot of reactive and UI related\n        tasks, think back button on browsers\n      </About>\n      <Complexity complexity={[\n        {\n          \"name\": \"Indexing\",\n          \"complexity\": \"Θ(n)\"\n        },\n        {\n          \"name\": \"Enqueue/Dequeue Element\",\n          \"complexity\": \"Θ(1)\"\n        },\n        \n        {\n          \"name\": \"Average wasted space\",\n          \"complexity\": \"Θ(1)\",\n        },\n      ]} />\n      <Demo />\n    </VisualPage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}