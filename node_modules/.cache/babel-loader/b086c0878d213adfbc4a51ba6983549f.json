{"ast":null,"code":"var _jsxFileName = \"/home/dan/Projects/datastructures.dev/src/Data-Structures/queue.js\";\nimport React, { useState } from 'react';\nimport VisualPage, { About, Complexity, Controls, ControlGroup, Visualization } from '../VisualPage.js';\nimport { Node } from '../VisualComponents.js';\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [addVal, setAddVal] = useState();\n\n  function add(addEnd) {}\n\n  function remove() {} // Generate the nodes in correct order for visualization\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, \"Add item\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"add\",\n    type: \"text\",\n    onChange: e => setAddVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => add(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"Enqueue\")), /*#__PURE__*/React.createElement(ControlGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: remove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Dequeue\"))), /*#__PURE__*/React.createElement(Visualization, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, list.map(node => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, node.value);\n  })));\n}\n\nexport default function Queue(props) {\n  return /*#__PURE__*/React.createElement(VisualPage, {\n    title: \"Queue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(About, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"What is a Queue?\"), \"Stacks are a FIFO (first in- first out) structure. They are used in a lot of reactive and UI related tasks, think back button on browsers\"), /*#__PURE__*/React.createElement(Complexity, {\n    complexity: [{\n      \"name\": \"Indexing\",\n      \"complexity\": \"Θ(n)\"\n    }, {\n      \"name\": \"Enqueue/Dequeue Element\",\n      \"complexity\": \"Θ(1)\"\n    }, {\n      \"name\": \"Average wasted space\",\n      \"complexity\": \"Θ(1)\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Demo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/dan/Projects/datastructures.dev/src/Data-Structures/queue.js"],"names":["React","useState","VisualPage","About","Complexity","Controls","ControlGroup","Visualization","Node","Demo","list","setList","addVal","setAddVal","add","addEnd","remove","e","target","value","map","node","Queue","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,IACEC,KADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,YAJF,EAKEC,aALF,QAMO,kBANP;AAOA,SACEC,IADF,QAEO,wBAFP;;AAKA,SAASC,IAAT,GAAgB;AACd,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,EAApC;;AAEA,WAASa,GAAT,CAAaC,MAAb,EAAqB,CACpB;;AAED,WAASC,MAAT,GAAkB,CAEjB,CATa,CAWd;;;AACA,sBACE,uDACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,IAAA,IAAI,EAAC,KAAZ;AAAkB,IAAA,IAAI,EAAC,MAAvB;AAA8B,IAAA,QAAQ,EAAEC,CAAC,IAAIJ,SAAS,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,OAAO,EAAE,MAAML,GAAG,CAAC,IAAD,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CADF,eAME,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEE,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CANF,CADF,eAWE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,IAAI,CAACU,GAAL,CAASC,IAAI,IAAI;AAChB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACF,KADR,CADF;AAKD,GANA,CADH,CAXF,CADF;AAuBD;;AAED,eAAe,SAASG,KAAT,CAAeC,KAAf,EAAsB;AACnC,sBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,8IADF,eAME,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAE,CACtB;AACE,cAAQ,UADV;AAEE,oBAAc;AAFhB,KADsB,EAKtB;AACE,cAAQ,yBADV;AAEE,oBAAc;AAFhB,KALsB,EAUtB;AACE,cAAQ,sBADV;AAEE,oBAAc;AAFhB,KAVsB,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAqBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CADF;AAyBD","sourcesContent":["import React, { useState } from 'react';\nimport VisualPage, {\n  About,\n  Complexity,\n  Controls,\n  ControlGroup,\n  Visualization,\n} from '../VisualPage.js';\nimport {\n  Node,\n} from '../VisualComponents.js';\n\n\nfunction Demo() {\n  const [list, setList] = useState([]);\n  const [addVal, setAddVal] = useState();\n\n  function add(addEnd) {\n  }\n\n  function remove() {\n\n  }\n\n  // Generate the nodes in correct order for visualization\n  return (\n    <>\n      <Controls>\n        <ControlGroup>\n          <label htmlFor=\"add\">Add item</label>\n          <input name=\"add\" type=\"text\" onChange={e => setAddVal(e.target.value)}></input>\n          <button onClick={() => add(true)}>Enqueue</button>\n        </ControlGroup>\n        <ControlGroup>\n          <button onClick={remove}>Dequeue</button>\n        </ControlGroup>\n      </Controls>\n      <Visualization>\n        {list.map(node => {\n          return (\n            <div>\n              {node.value}\n            </div>\n          );\n        })}\n      </Visualization>\n    </>\n  );\n}\n\nexport default function Queue(props) {\n  return (\n    <VisualPage title=\"Queue\">\n      <About>\n        <h4>What is a Queue?</h4>\n        Stacks are a FIFO (first in- first out) structure. They are used in a lot of reactive and UI related\n        tasks, think back button on browsers\n      </About>\n      <Complexity complexity={[\n        {\n          \"name\": \"Indexing\",\n          \"complexity\": \"Θ(n)\"\n        },\n        {\n          \"name\": \"Enqueue/Dequeue Element\",\n          \"complexity\": \"Θ(1)\"\n        },\n        \n        {\n          \"name\": \"Average wasted space\",\n          \"complexity\": \"Θ(1)\",\n        },\n      ]} />\n      <Demo />\n    </VisualPage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}